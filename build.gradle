plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	// Serves Polymer modules
	maven {
		url 'https://maven.nucleoid.xyz'
	}

	maven {
		url = uri("https://repo.opencollab.dev/main/")
	}

	    // JitPack for GitHub-based dependencies
	maven {
		url = uri("https://jitpack.io")
	}
	
	// Serves "creative" library, needed for pack converter
    mavenCentral()
}

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
		compileClasspath += main.output
		runtimeClasspath += main.output
	}
}

loom {
	mods {
		"bedframe" {
			sourceSet sourceSets.main
		}
		"bedframe-testmod" {
			sourceSet sourceSets.testmod
		}
	}
	runs {
		testmodServer {
			server()
			ideConfigGenerated = true
			name = "Testmod Server"
			source sourceSets.testmod
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Polymer
	modImplementation "eu.pb4:polymer-core:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-blocks:${project.polymer_version}"
	modImplementation "eu.pb4:polymer-resource-pack:${project.polymer_version}"

	// Server-Translations
	modImplementation "xyz.nucleoid:server-translations-api:${project.server_translations_version}"

	// Geyser
	compileOnly("org.geysermc.geyser:api:${project.geyser_version}")
	compileOnly("org.geysermc.geyser:core:${project.geyser_version}")

	include api("org.geysermc.pack:converter:${project.pack_converter_version}")
	include api("org.geysermc.pack:pack-schema-api:${project.pack_converter_version}")
	implementation "com.github.GeyserMC.unnamed-creative:creative-api:817fa982c4"
	implementation "com.github.GeyserMC.unnamed-creative:creative-serializer-minecraft:817fa982c4"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
